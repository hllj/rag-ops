version: '3.8'

services:
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.0
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - app-network

  minio:
    container_name: minio-server
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.2.8
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - app-network

  mlflow:
    container_name: mlflow-server
    image: ghcr.io/mlflow/mlflow:latest
    ports:
      - "3500:3500"
    environment:
      - MLFLOW_SERVER_HOST=0.0.0.0
      - MLFLOW_SERVER_PORT=3500
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/mlflow:/mlflow
    command: >
      mlflow server 
      --backend-store-uri sqlite:///mlflow/mlflow.db 
      --default-artifact-root /mlflow/mlruns 
      --host 0.0.0.0 
      --port 3500
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3500"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      - "minio"
    networks:
      - app-network

  ingestion:
    build:
      context: .
      dockerfile: Dockerfile.ingestion
    container_name: rag-ingestion
    volumes:
      - ./documents:/app/documents
      - .env:/app/.env
    environment:
      - MILVUS_HOST=standalone
      - MILVUS_PORT=19530
      - MINIO_ADDRESS=minio:9000
      - MLFLOW_TRACKING_URI=http://mlflow:3500
      - PYTHONUNBUFFERED=1
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - standalone
      - etcd
      - mlflow
      - minio

  airflow-init:
    image: apache/airflow:2.7.3-python3.11
    entrypoint: /bin/bash
    command: -c "
      pip install -r /opt/airflow/requirements.txt &&
      airflow db migrate &&
      airflow users create \
        --username admin \
        --password admin \
        --firstname Admin \
        --lastname Admin \
        --role Admin \
        --email admin@example.com &&
      airflow connections add 'postgres_default' \
        --conn-type 'postgres' \
        --conn-login 'airflow' \
        --conn-password 'airflow' \
        --conn-host 'postgres' \
        --conn-port '5432' \
        --conn-schema 'airflow'"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=false
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
      - ./requirements.txt:/opt/airflow/requirements.txt
    networks:
      - app-network

  airflow-webserver:
    image: apache/airflow:2.7.3-python3.11
    command: bash -c "pip install -r /opt/airflow/requirements.txt && airflow webserver"
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - airflow-init
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./src:/opt/airflow/src
      - ./config:/opt/airflow/config
      - ./requirements.txt:/opt/airflow/requirements.txt
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  airflow-scheduler:
    image: apache/airflow:2.7.3-python3.11
    command: bash -c "pip install -r /opt/airflow/requirements.txt && airflow scheduler"
    depends_on:
      - postgres
      - airflow-init
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./src:/opt/airflow/src
      - ./config:/opt/airflow/config
      - ./requirements.txt:/opt/airflow/requirements.txt
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    networks:
      - app-network

  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  api:
    build:
      context: .
      dockerfile: Dockerfile.app
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MILVUS_HOST=standalone
      - MILVUS_PORT=19530
    depends_on:
      - standalone
      - etcd
      - mlflow
      - minio
    networks:
      - app-network
    volumes:
      - ./data:/app/data

volumes:
  postgres-db-volume:
    name: postgres-db-volume

networks:
  app-network:
    name: app-network